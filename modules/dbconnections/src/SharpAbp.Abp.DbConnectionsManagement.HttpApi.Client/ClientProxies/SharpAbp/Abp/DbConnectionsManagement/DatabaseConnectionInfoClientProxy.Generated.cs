// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using SharpAbp.Abp.DbConnectionsManagement;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace SharpAbp.Abp.DbConnectionsManagement;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IDatabaseConnectionInfoAppService), typeof(DatabaseConnectionInfoClientProxy))]
public partial class DatabaseConnectionInfoClientProxy : ClientProxyBase<IDatabaseConnectionInfoAppService>, IDatabaseConnectionInfoAppService
{
    public virtual async Task<DatabaseConnectionInfoDto> GetAsync(Guid id)
    {
        return await RequestAsync<DatabaseConnectionInfoDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<DatabaseConnectionInfoDto> FindByNameAsync(string name)
    {
        return await RequestAsync<DatabaseConnectionInfoDto>(nameof(FindByNameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name }
        });
    }

    public virtual async Task<List<DatabaseConnectionInfoDto>> GetListAsync(string sorting, string name, string databaseProvider)
    {
        return await RequestAsync<List<DatabaseConnectionInfoDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), sorting },
            { typeof(string), name },
            { typeof(string), databaseProvider }
        });
    }

    public virtual async Task<PagedResultDto<DatabaseConnectionInfoDto>> GetPagedListAsync(DatabaseConnectionInfoPagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<DatabaseConnectionInfoDto>>(nameof(GetPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(DatabaseConnectionInfoPagedRequestDto), input }
        });
    }

    public virtual async Task<DatabaseConnectionInfoDto> CreateAsync(CreateDatabaseConnectionInfoDto input)
    {
        return await RequestAsync<DatabaseConnectionInfoDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateDatabaseConnectionInfoDto), input }
        });
    }

    public virtual async Task<DatabaseConnectionInfoDto> UpdateAsync(Guid id, UpdateDatabaseConnectionInfoDto input)
    {
        return await RequestAsync<DatabaseConnectionInfoDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateDatabaseConnectionInfoDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
