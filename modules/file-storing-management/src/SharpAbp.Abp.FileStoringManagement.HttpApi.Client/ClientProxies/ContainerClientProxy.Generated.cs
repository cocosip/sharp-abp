// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using SharpAbp.Abp.FileStoringManagement;
using System.Collections.Generic;

// ReSharper disable once CheckNamespace
namespace SharpAbp.Abp.FileStoringManagement.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IContainerAppService), typeof(ContainerClientProxy))]
public partial class ContainerClientProxy : ClientProxyBase<IContainerAppService>, IContainerAppService
{
    public virtual async Task<ContainerDto> GetAsync(Guid id)
    {
        return await RequestAsync<ContainerDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<ContainerDto>> GetPagedListAsync(FileStoringContainerPagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<ContainerDto>>(nameof(GetPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(FileStoringContainerPagedRequestDto), input }
        });
    }

    public virtual async Task<List<ContainerDto>> GetAllAsync()
    {
        return await RequestAsync<List<ContainerDto>>(nameof(GetAllAsync));
    }

    public virtual async Task<ContainerDto> FindByNameAsync(string name)
    {
        return await RequestAsync<ContainerDto>(nameof(FindByNameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name }
        });
    }

    public virtual async Task<ContainerDto> CreateAsync(CreateContainerDto input)
    {
        return await RequestAsync<ContainerDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateContainerDto), input }
        });
    }

    public virtual async Task<ContainerDto> UpdateAsync(Guid id, UpdateContainerDto input)
    {
        return await RequestAsync<ContainerDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateContainerDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
