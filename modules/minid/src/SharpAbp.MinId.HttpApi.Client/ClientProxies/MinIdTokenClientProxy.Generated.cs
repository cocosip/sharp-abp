// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using SharpAbp.MinId;

// ReSharper disable once CheckNamespace
namespace SharpAbp.MinId.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IMinIdTokenAppService), typeof(MinIdTokenClientProxy))]
public partial class MinIdTokenClientProxy : ClientProxyBase<IMinIdTokenAppService>, IMinIdTokenAppService
{
    public virtual async Task<MinIdTokenDto> GetAsync(Guid id)
    {
        return await RequestAsync<MinIdTokenDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<MinIdTokenDto> FindByTokenAsync(string bizType, string token)
    {
        return await RequestAsync<MinIdTokenDto>(nameof(FindByTokenAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), bizType },
            { typeof(string), token }
        });
    }

    public virtual async Task<PagedResultDto<MinIdTokenDto>> GetPagedListAsync(MinIdTokenPagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<MinIdTokenDto>>(nameof(GetPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(MinIdTokenPagedRequestDto), input }
        });
    }

    public virtual async Task<Guid> CreateAsync(CreateMinIdTokenDto input)
    {
        return await RequestAsync<Guid>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateMinIdTokenDto), input }
        });
    }

    public virtual async Task UpdateAsync(Guid id, UpdateMinIdTokenDto input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateMinIdTokenDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
