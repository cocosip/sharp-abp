// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using SharpAbp.MinId;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace SharpAbp.MinId;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IMinIdInfoAppService), typeof(MinIdInfoClientProxy))]
public partial class MinIdInfoClientProxy : ClientProxyBase<IMinIdInfoAppService>, IMinIdInfoAppService
{
    public virtual async Task<MinIdInfoDto> GetAsync(Guid id)
    {
        return await RequestAsync<MinIdInfoDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<MinIdInfoDto> FindByBizTypeAsync(string bizType)
    {
        return await RequestAsync<MinIdInfoDto>(nameof(FindByBizTypeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), bizType }
        });
    }

    public virtual async Task<PagedResultDto<MinIdInfoDto>> GetPagedListAsync(MinIdInfoPagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<MinIdInfoDto>>(nameof(GetPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(MinIdInfoPagedRequestDto), input }
        });
    }

    public virtual async Task<List<MinIdInfoDto>> GetListAsync(string sorting, string bizType)
    {
        return await RequestAsync<List<MinIdInfoDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), sorting },
            { typeof(string), bizType }
        });
    }

    public virtual async Task<MinIdInfoDto> CreateAsync(CreateMinIdInfoDto input)
    {
        return await RequestAsync<MinIdInfoDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateMinIdInfoDto), input }
        });
    }

    public virtual async Task<MinIdInfoDto> UpdateAsync(Guid id, UpdateMinIdInfoDto input)
    {
        return await RequestAsync<MinIdInfoDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateMinIdInfoDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
