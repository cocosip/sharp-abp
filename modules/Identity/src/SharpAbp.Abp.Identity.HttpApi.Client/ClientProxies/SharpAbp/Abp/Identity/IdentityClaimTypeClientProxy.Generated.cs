// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using SharpAbp.Abp.Identity;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace SharpAbp.Abp.Identity;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IIdentityClaimTypeAppService), typeof(IdentityClaimTypeClientProxy))]
public partial class IdentityClaimTypeClientProxy : ClientProxyBase<IIdentityClaimTypeAppService>, IIdentityClaimTypeAppService
{
    public virtual async Task<IdentityClaimTypeDto> GetAsync(Guid id)
    {
        return await RequestAsync<IdentityClaimTypeDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<bool> AnyAsync(string name, Guid? ignoredId)
    {
        return await RequestAsync<bool>(nameof(AnyAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name },
            { typeof(Guid?), ignoredId }
        });
    }

    public virtual async Task<PagedResultDto<IdentityClaimTypeDto>> GetPagedListAsync(IdentityClaimTypePagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<IdentityClaimTypeDto>>(nameof(GetPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(IdentityClaimTypePagedRequestDto), input }
        });
    }

    public virtual async Task<Guid> CreateAsync(CreateIdentityClaimTypeDto input)
    {
        return await RequestAsync<Guid>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateIdentityClaimTypeDto), input }
        });
    }

    public virtual async Task UpdateAsync(Guid id, UpdateIdentityClaimTypeDto input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateIdentityClaimTypeDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
