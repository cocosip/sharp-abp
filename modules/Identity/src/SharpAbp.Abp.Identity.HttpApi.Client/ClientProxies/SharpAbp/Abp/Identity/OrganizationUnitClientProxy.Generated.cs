// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using SharpAbp.Abp.Identity;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;
using Volo.Abp.Identity;

// ReSharper disable once CheckNamespace
namespace SharpAbp.Abp.Identity;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IOrganizationUnitAppService), typeof(OrganizationUnitClientProxy))]
public partial class OrganizationUnitClientProxy : ClientProxyBase<IOrganizationUnitAppService>, IOrganizationUnitAppService
{
    public virtual async Task<List<OrganizationUnitDto>> GetAllAsync()
    {
        return await RequestAsync<List<OrganizationUnitDto>>(nameof(GetAllAsync));
    }

    public virtual async Task<OrganizationUnitDto> FindByDisplayNameAsync(string displayName)
    {
        return await RequestAsync<OrganizationUnitDto>(nameof(FindByDisplayNameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), displayName }
        });
    }

    public virtual async Task<OrganizationUnitDto> GetAsync(Guid id)
    {
        return await RequestAsync<OrganizationUnitDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<List<OrganizationUnitDto>> GetListAsync(List<Guid> ids)
    {
        return await RequestAsync<List<OrganizationUnitDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(List<Guid>), ids }
        });
    }

    public virtual async Task<List<OrganizationUnitDto>> GetChildrenAsync(Guid? parentId)
    {
        return await RequestAsync<List<OrganizationUnitDto>>(nameof(GetChildrenAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid?), parentId }
        });
    }

    public virtual async Task<List<OrganizationUnitDto>> GetAllChildrenWithParentCodeAsync(string code, Guid? parentId)
    {
        return await RequestAsync<List<OrganizationUnitDto>>(nameof(GetAllChildrenWithParentCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), code },
            { typeof(Guid?), parentId }
        });
    }

    public virtual async Task<PagedResultDto<OrganizationUnitDto>> GetPagedListAsync(OrganizationUnitPagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<OrganizationUnitDto>>(nameof(GetPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(OrganizationUnitPagedRequestDto), input }
        });
    }

    public virtual async Task<Guid> CreateAsync(CreateOrganizationUnitDto input)
    {
        return await RequestAsync<Guid>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateOrganizationUnitDto), input }
        });
    }

    public virtual async Task UpdateAsync(Guid id, UpdateOrganizationUnitDto input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateOrganizationUnitDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task MoveAsync(Guid id, MoveOrganizationUnitDto input)
    {
        await RequestAsync(nameof(MoveAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(MoveOrganizationUnitDto), input }
        });
    }

    public virtual async Task<PagedResultDto<IdentityRoleDto>> GetRolesPagedListAsync(Guid id, OrganizationUnitRolePagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<IdentityRoleDto>>(nameof(GetRolesPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(OrganizationUnitRolePagedRequestDto), input }
        });
    }

    public virtual async Task<PagedResultDto<IdentityRoleDto>> GetUnaddedRolesPagedListAsync(Guid id, OrganizationUnitUnaddedRolePagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<IdentityRoleDto>>(nameof(GetUnaddedRolesPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(OrganizationUnitUnaddedRolePagedRequestDto), input }
        });
    }

    public virtual async Task AddRoleToOrganizationUnitAsync(Guid id, AddRoleToOrganizationUnitDto input)
    {
        await RequestAsync(nameof(AddRoleToOrganizationUnitAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(AddRoleToOrganizationUnitDto), input }
        });
    }

    public virtual async Task RemoveRoleFromOrganizationUnitAsync(Guid id, Guid roleId)
    {
        await RequestAsync(nameof(RemoveRoleFromOrganizationUnitAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(Guid), roleId }
        });
    }

    public virtual async Task<PagedResultDto<IdentityUserDto>> GetMembersPagedListAsync(Guid id, OrganizationUnitMemberPagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<IdentityUserDto>>(nameof(GetMembersPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(OrganizationUnitMemberPagedRequestDto), input }
        });
    }

    public virtual async Task<PagedResultDto<IdentityUserDto>> GetUnaddedMembersPagedListAsync(Guid id, OrganizationUnitUnaddedMemberPagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<IdentityUserDto>>(nameof(GetUnaddedMembersPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(OrganizationUnitUnaddedMemberPagedRequestDto), input }
        });
    }

    public virtual async Task AddMemberToOrganizationUnitAsync(Guid id, AddMemberToOrganizationUnitDto input)
    {
        await RequestAsync(nameof(AddMemberToOrganizationUnitAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(AddMemberToOrganizationUnitDto), input }
        });
    }

    public virtual async Task RemoveMemberFromOrganizationUnitAsync(Guid id, Guid userId)
    {
        await RequestAsync(nameof(RemoveMemberFromOrganizationUnitAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(Guid), userId }
        });
    }
}
