// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using SharpAbp.Abp.MapTenancyManagement;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace SharpAbp.Abp.MapTenancyManagement;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IMapTenantAppService), typeof(MapTenantClientProxy))]
public partial class MapTenantClientProxy : ClientProxyBase<IMapTenantAppService>, IMapTenantAppService
{
    public virtual async Task<MapTenantDto> GetAsync(Guid id)
    {
        return await RequestAsync<MapTenantDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<MapTenantDto> FindByCodeAsync(string code)
    {
        return await RequestAsync<MapTenantDto>(nameof(FindByCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), code }
        });
    }

    public virtual async Task<MapTenantDto> FindByMapCodeAsync(string mapCode)
    {
        return await RequestAsync<MapTenantDto>(nameof(FindByMapCodeAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), mapCode }
        });
    }

    public virtual async Task<MapTenantDto> FindByTenantIdAsync(Guid tenantId)
    {
        return await RequestAsync<MapTenantDto>(nameof(FindByTenantIdAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), tenantId }
        });
    }

    public virtual async Task<PagedResultDto<MapTenantDto>> GetPagedListAsync(MapTenantPagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<MapTenantDto>>(nameof(GetPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(MapTenantPagedRequestDto), input }
        });
    }

    public virtual async Task<MapTenantDto> CreateAsync(CreateMapTenantDto input)
    {
        return await RequestAsync<MapTenantDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateMapTenantDto), input }
        });
    }

    public virtual async Task<MapTenantDto> UpdateAsync(Guid id, UpdateMapTenantDto input)
    {
        return await RequestAsync<MapTenantDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateMapTenantDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
