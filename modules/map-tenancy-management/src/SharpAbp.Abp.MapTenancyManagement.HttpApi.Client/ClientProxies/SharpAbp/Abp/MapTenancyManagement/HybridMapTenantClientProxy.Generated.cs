// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using SharpAbp.Abp.MapTenancyManagement;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace SharpAbp.Abp.MapTenancyManagement;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IHybridMapTenantAppService), typeof(HybridMapTenantClientProxy))]
public partial class HybridMapTenantClientProxy : ClientProxyBase<IHybridMapTenantAppService>, IHybridMapTenantAppService
{
    public virtual async Task<HybridMapTenantDto> GetAsync(Guid id)
    {
        return await RequestAsync<HybridMapTenantDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<List<HybridMapTenantDto>> GetAllAsync()
    {
        return await RequestAsync<List<HybridMapTenantDto>>(nameof(GetAllAsync));
    }

    public virtual async Task<HybridMapTenantDto> CurrentAsync()
    {
        return await RequestAsync<HybridMapTenantDto>(nameof(CurrentAsync));
    }

    public virtual async Task<PagedResultDto<HybridMapTenantDto>> GetListAsync(HybridMapTenantPagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<HybridMapTenantDto>>(nameof(GetListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(HybridMapTenantPagedRequestDto), input }
        });
    }

    public virtual async Task<PagedResultDto<HybridMapTenantDto>> SearchAsync(HybridMapTenantPagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<HybridMapTenantDto>>(nameof(SearchAsync), new ClientProxyRequestTypeValue
        {
            { typeof(HybridMapTenantPagedRequestDto), input }
        });
    }

    public virtual async Task<HybridMapTenantDto> CreateAsync(CreateHybridMapTenantDto input)
    {
        return await RequestAsync<HybridMapTenantDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateHybridMapTenantDto), input }
        });
    }

    public virtual async Task<HybridMapTenantDto> UpdateAsync(Guid id, UpdateHybridMapTenantDto input)
    {
        return await RequestAsync<HybridMapTenantDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateHybridMapTenantDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<string> GetDefaultConnectionStringAsync(Guid id)
    {
        return await RequestAsync<string>(nameof(GetDefaultConnectionStringAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task UpdateDefaultConnectionStringAsync(Guid id, string defaultConnectionString)
    {
        await RequestAsync(nameof(UpdateDefaultConnectionStringAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(string), defaultConnectionString }
        });
    }

    public virtual async Task DeleteDefaultConnectionStringAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteDefaultConnectionStringAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
