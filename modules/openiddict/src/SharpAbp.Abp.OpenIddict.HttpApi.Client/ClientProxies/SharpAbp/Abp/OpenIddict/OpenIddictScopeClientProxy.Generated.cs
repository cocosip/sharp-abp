// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using SharpAbp.Abp.OpenIddict;
using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Client.ClientProxying;
using Volo.Abp.Http.Modeling;

// ReSharper disable once CheckNamespace
namespace SharpAbp.Abp.OpenIddict;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IOpenIddictScopeAppService), typeof(OpenIddictScopeClientProxy))]
public partial class OpenIddictScopeClientProxy : ClientProxyBase<IOpenIddictScopeAppService>, IOpenIddictScopeAppService
{
    public virtual async Task<OpenIddictScopeDto> GetAsync(Guid id)
    {
        return await RequestAsync<OpenIddictScopeDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<PagedResultDto<OpenIddictScopeDto>> GetPagedListAsync(PagedAndSortedResultRequestDto input)
    {
        return await RequestAsync<PagedResultDto<OpenIddictScopeDto>>(nameof(GetPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(PagedAndSortedResultRequestDto), input }
        });
    }

    public virtual async Task<List<OpenIddictScopeDto>> GetListAsync()
    {
        return await RequestAsync<List<OpenIddictScopeDto>>(nameof(GetListAsync));
    }

    public virtual async Task<OpenIddictScopeDto> FindByNameAsync(string name)
    {
        return await RequestAsync<OpenIddictScopeDto>(nameof(FindByNameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name }
        });
    }

    public virtual async Task<OpenIddictScopeDto> CreateAsync(CreateOpenIddictScopeDto input)
    {
        return await RequestAsync<OpenIddictScopeDto>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateOpenIddictScopeDto), input }
        });
    }

    public virtual async Task<OpenIddictScopeDto> UpdateAsync(Guid id, UpdateOpenIddictScopeDto input)
    {
        return await RequestAsync<OpenIddictScopeDto>(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateOpenIddictScopeDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
