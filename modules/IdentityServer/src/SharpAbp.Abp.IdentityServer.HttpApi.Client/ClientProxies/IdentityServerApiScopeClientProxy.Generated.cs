// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using SharpAbp.Abp.IdentityServer.ApiScopes;
using System.Collections.Generic;

// ReSharper disable once CheckNamespace
namespace SharpAbp.Abp.IdentityServer.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IIdentityServerApiScopeAppService), typeof(IdentityServerApiScopeClientProxy))]
public partial class IdentityServerApiScopeClientProxy : ClientProxyBase<IIdentityServerApiScopeAppService>, IIdentityServerApiScopeAppService
{
    public virtual async Task<ApiScopeDto> GetAsync(Guid id)
    {
        return await RequestAsync<ApiScopeDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ApiScopeDto> FindByNameAsync(string name)
    {
        return await RequestAsync<ApiScopeDto>(nameof(FindByNameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), name }
        });
    }

    public virtual async Task<PagedResultDto<ApiScopeDto>> GetPagedListAsync(ApiScopePagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<ApiScopeDto>>(nameof(GetPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ApiScopePagedRequestDto), input }
        });
    }

    public virtual async Task<List<ApiScopeDto>> GetListByNameAsync(String[] scopeNames)
    {
        return await RequestAsync<List<ApiScopeDto>>(nameof(GetListByNameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(String[]), scopeNames }
        });
    }

    public virtual async Task<Guid> CreateAsync(CreateApiScopeDto input)
    {
        return await RequestAsync<Guid>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateApiScopeDto), input }
        });
    }

    public virtual async Task UpdateAsync(Guid id, UpdateApiScopeDto input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateApiScopeDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
