// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using SharpAbp.Abp.IdentityServer.ApiResources;
using System.Collections.Generic;

// ReSharper disable once CheckNamespace
namespace SharpAbp.Abp.IdentityServer.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IIdentityServerApiResourceAppService), typeof(IdentityServerApiResourceClientProxy))]
public partial class IdentityServerApiResourceClientProxy : ClientProxyBase<IIdentityServerApiResourceAppService>, IIdentityServerApiResourceAppService
{
    public virtual async Task<ApiResourceDto> GetAsync(Guid id)
    {
        return await RequestAsync<ApiResourceDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ApiResourceDto> FindByNameAsync(string apiResourceName)
    {
        return await RequestAsync<ApiResourceDto>(nameof(FindByNameAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), apiResourceName }
        });
    }

    public virtual async Task<List<ApiResourceDto>> GetListByScopesAsync(String[] scopeNames)
    {
        return await RequestAsync<List<ApiResourceDto>>(nameof(GetListByScopesAsync), new ClientProxyRequestTypeValue
        {
            { typeof(String[]), scopeNames }
        });
    }

    public virtual async Task<List<ApiResourceDto>> GetAllAsync()
    {
        return await RequestAsync<List<ApiResourceDto>>(nameof(GetAllAsync));
    }

    public virtual async Task<PagedResultDto<ApiResourceDto>> GetPagedListAsync(ApiResourcePagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<ApiResourceDto>>(nameof(GetPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ApiResourcePagedRequestDto), input }
        });
    }

    public virtual async Task<Guid> CreateAsync(CreateApiResourceDto input)
    {
        return await RequestAsync<Guid>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateApiResourceDto), input }
        });
    }

    public virtual async Task UpdateAsync(Guid id, UpdateApiResourceDto input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateApiResourceDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
