// This file is automatically generated by ABP framework to use MVC Controllers from CSharp
using System;
using System.Threading.Tasks;
using Volo.Abp.Application.Dtos;
using Volo.Abp.Http.Client;
using Volo.Abp.Http.Modeling;
using Volo.Abp.DependencyInjection;
using Volo.Abp.Http.Client.ClientProxying;
using SharpAbp.Abp.IdentityServer.Clients;
using System.Collections.Generic;

// ReSharper disable once CheckNamespace
namespace SharpAbp.Abp.IdentityServer.ClientProxies;

[Dependency(ReplaceServices = true)]
[ExposeServices(typeof(IIdentityServerClientAppService), typeof(IdentityServerClientClientProxy))]
public partial class IdentityServerClientClientProxy : ClientProxyBase<IIdentityServerClientAppService>, IIdentityServerClientAppService
{
    public virtual async Task<ClientDto> GetAsync(Guid id)
    {
        return await RequestAsync<ClientDto>(nameof(GetAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }

    public virtual async Task<ClientDto> FindByClientIdAsync(string clientId)
    {
        return await RequestAsync<ClientDto>(nameof(FindByClientIdAsync), new ClientProxyRequestTypeValue
        {
            { typeof(string), clientId }
        });
    }

    public virtual async Task<PagedResultDto<ClientDto>> GetPagedListAsync(ClientPagedRequestDto input)
    {
        return await RequestAsync<PagedResultDto<ClientDto>>(nameof(GetPagedListAsync), new ClientProxyRequestTypeValue
        {
            { typeof(ClientPagedRequestDto), input }
        });
    }

    public virtual async Task<List<String>> GetAllDistinctAllowedCorsOriginsAsync()
    {
        return await RequestAsync<List<String>>(nameof(GetAllDistinctAllowedCorsOriginsAsync));
    }

    public virtual async Task<Guid> CreateAsync(CreateClientDto input)
    {
        return await RequestAsync<Guid>(nameof(CreateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(CreateClientDto), input }
        });
    }

    public virtual async Task UpdateAsync(Guid id, UpdateClientDto input)
    {
        await RequestAsync(nameof(UpdateAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id },
            { typeof(UpdateClientDto), input }
        });
    }

    public virtual async Task DeleteAsync(Guid id)
    {
        await RequestAsync(nameof(DeleteAsync), new ClientProxyRequestTypeValue
        {
            { typeof(Guid), id }
        });
    }
}
